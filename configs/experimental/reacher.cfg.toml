device = "cpu"#"cuda"#
tensor = "torch.DoubleTensor"#"torch.cuda.DoubleTensor"#
model_path = "models_dtb"
load = true
save = true
dbgout = true#false#
loss_debug = false#true

n_step = 1
n_critics = 1
batch_size = 32 # contains whole subset of batches, therefore up to 50 * this numero ..
discount_rate = 0.995
disjoint_critics = false#true#

task = "FetchReach-v1"
n_simulations = 1
action_repeat = 1#2#
max_reward_val = +1000
min_reward_val = -1000
replay_size = 100000
max_n_eps = 50#100#70#400#2000#
mcts_random_cap = 1000000
mcts_rounds = 3
max_ep_draw_count = 8

# reinforce or TD-lambda
td_lambda_replay_count = 10
reinforce_clip = false
tau_clip = 0

lr_actor = 2e-5#1e-5#3e-4
lr_critic = 1e-4#1e-4

tau_base = 5e-2 # update from full episodes
tau_final = 1e-3
tau_replay_counter = 1000000
tau_adapt = 1e-4 # update from active experiences ~ we want to have it lower generaly
actor_update_delay = 3# soft update of actor ~ off-policy, how much fits on explorer before
critic_update_delay = 3#40 # soft update of critic ~ off-policy, how much fits on explorer before
critic_learn_delta = 24 # here how much episodes before critic(and therefore also actor)-explorer update

# usually when we normalize advantages, we want to use sum in PG, and also attention is preferred
pg_mean = true#false#

good_reach = 1 # select from experience only related things if task is designed that way
advantages_enabled = true#false#
advantages_boost = true#false#
normalize_advantages = false#true#

attention_enabled = false#true#
attention_hidden = 64
attention_amplifier = 2.0

max_n_step = 1#-10000#

# scheduling of replay buffer randomnes
replay_alpha = 1.0
replay_beta_iters = 6000 # here we should have enough experience to do serious prioritzation
replay_beta_base = 0.2
replay_beta_top = 0.8
replay_prio_eps = 1e-16

#####################################
# neural nets settings
#####################################

#lstm advancement
history_count = 3
history_features = 256#128#64

her_state_size = 3
her_state_features = 64
her_max_ratio = 4

