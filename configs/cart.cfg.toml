device = "cpu"#"cuda"#
tensor = "torch.DoubleTensor"#"torch.cuda.DoubleTensor"#
model_path = "models_dtb"
load = false
save = false
loss_debug = false#

n_step = 3
n_critics = 1
batch_size = 128
discount_rate = 0.99
disjoint_critics = true#false#
dbgout=true

task = "CartPole-v1"
n_simulations = 1
action_repeat = 1
max_reward_val = +600
min_reward_val = -200
replay_size = 24000
max_n_eps = 1000
max_ep_draw_count = 6
mcts_rounds = 2
mcts_random_cap = 1000000
td_lambda_replay_count = 3
reinforce_clip = true#false
tau_clip = 0

tau_base = 1e-2 # update from full episodes
tau_final = 7e-3
tau_replay_counter = 10000
tau_adapt = 1e-3 # update from active experiences ~ we want to have it lower generaly
actor_update_delay = 1 # soft update of actor ~ off-policy, how much fits on explorer before
critic_update_delay = 1 # soft update of critic ~ off-policy, how much fits on explorer before
critic_learn_delta = 1 # here how much episodes before critic(and therefore also actor)-explorer update

lr_actor = 1e-3
lr_critic = 1e-3

# usually when we normalize advantages, we want to use sum in PG, and also attention is preferred
pg_mean = true#false#

good_reach = 2 # select from experience only related things if task is designed that way
advantages_enabled = true#false#
advantages_boost = true#false#
normalize_advantages = false#true#

attention_enabled = false#true#
attention_hidden = 24
attention_amplifier = 1.0

max_n_step = 1#-10000#

# scheduling of replay buffer randomnes
replay_alpha = 0.8
replay_beta_iters = 6000 # here we should have enough experience to do serious prioritzation
replay_beta_base = 0.2
replay_beta_top = 0.7
replay_prio_eps = 1e-3

#####################################
# neural nets settings
#####################################

#lstm advancement
history_count = 2
history_features = 48

her_state_size = 0
her_state_features = 0
her_max_ratio = 0

dbgout_train = false#true#
fast_exp_epochs = 4
ppo_eps = 2e-1
loss_min = 1000

dbgout_ratio = true#false#
ddpg = true#false#

replay_cleaning = false#true#
